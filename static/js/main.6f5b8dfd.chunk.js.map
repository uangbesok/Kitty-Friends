{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","map","user","key","phone","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","Response","json","users","filteredKittens","filter","kitten","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKC,UAAU,yDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAI,KAClE,6BACE,4BAAKJ,GACL,2BAAIC,MCOGI,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BACIA,EAAOC,KAAI,SAAAC,GACX,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKT,GAAIA,GAAIS,EAAKE,MAAOV,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCM9DU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACA,yBAAKV,UAAU,OACX,2BACMA,UAAU,kCACVW,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCAPI,EAPA,SAACC,GAEZ,OAAQ,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SACvEJ,EAAMK,WCsBAC,E,YAxBX,aACC,IAAD,8BACI,+CACKC,MAAQ,CACTC,UAAW,GAHnB,E,+EAOkBC,EAAOC,GAErBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAK3B,OAAGG,KAAKJ,MAAMC,SAEH,qEAEJG,KAAKX,MAAMK,a,GApBEQ,aC+CbC,G,kBAzCb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACXlB,OAAQ,GACR4B,YAAa,IAJH,E,iFAYO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAIpB,IAAD,EACuBb,KAAKJ,MAA5BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,YACTQ,EAAkBpC,EAAOqC,QAAO,SAAAC,GAAM,OAC1CA,EAAO5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAEjD,OACEvC,EAAOyC,OACP,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAAQoC,OAIxB,wBAAIxC,UAAU,SAAd,kB,GArCY4B,cCAlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.6f5b8dfd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\n// Displays generated kitty\nconst Card = ({id, name, email}) => {\n  return (\n    <div className=\"bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n      <img src={`https://robohash.org/${id}?set=set4&size=200x200`} alt=\"\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n// import { robots } from \"./robots\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>{\n        robots.map(user => {\n        return (\n            <Card key={user.id} id={user.phone} name={user.name} email={user.email} />\n        );\n        })\n    }</div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n  <div className=\"pa2\">\n      <input \n            className=\"pa3 ba b--blue bg-lightest-blue\"    \n            type=\"search\" \n            placeholder=\"Search kittens\" \n            onChange={searchChange}\n            />\n  </div>   \n  ); \n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => \n{\n    return (<div style={{overflow: 'scroll', border: '2px solid black', height: '75vh'}}>\n        {props.children}\n    </div>);\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor() \n    {\n        super();\n        this.state = {\n            hasError : false,\n        }\n    }\n\n    componentDidCatch(error, info)\n    {\n        this.setState({ hasError : true});\n    }\n\n    render()\n    {\n        if(this.state.hasError)\n        {\n            return <h1>Something not good has just happened!</h1>;\n        }\n        return this.props.children;\n    }\n}\n\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\"\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(Response => Response.json())\n      .then(users => {\n        this.setState({ robots: users });\n      });\n  }\n\n  render() {\n    const {robots, searchField} = this.state;  \n    const filteredKittens = robots.filter(kitten =>\n      kitten.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      robots.length ?\n      <div className=\"tc\">\n        <h1 className=\"f1\">Kitty Friends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredKittens} />\n          </ErrorBoundary>\n        </Scroll>\n      </div> :\n      <h1 className=\"f1 tc\">Loading...</h1>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from './containers/App'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}